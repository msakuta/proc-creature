'use client'
import Head from "next/head";
import { useEffect, useState } from "react";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import "@aptos-labs/wallet-adapter-ant-design/dist/index.css";
import { InputEntryFunctionData } from "@aptos-labs/ts-sdk";
import { AptosWalletAdapterProvider } from "@aptos-labs/wallet-adapter-react";
import { ThemeConfig } from 'antd';
import { PetraWallet } from "petra-plugin-wallet-adapter";
import { WalletSelector } from "@aptos-labs/wallet-adapter-ant-design";
import { aptosClient } from "../lib/aptosClient";
import { useWallet } from "@aptos-labs/wallet-adapter-react";
import Creature from "../components/Creature";

const inter = Inter({ subsets: ["latin"] });

const wallets = [
  new PetraWallet()
]

const CONTRACT_ADDRESS: string = process.env.NEXT_PUBLIC_CONTRACT_ADDRESS || "";

const antThemeConfig: ThemeConfig = {
}

export default function Home() {
  return (<AptosWalletAdapterProvider plugins={wallets} autoConnect={true}>
    <App />
  </AptosWalletAdapterProvider>);
};

function itoa(i: number) {
  return String.fromCharCode(i + 'a'.charCodeAt(0));
}

function App() {
  const { signAndSubmitTransaction } = useWallet();
  const [gene, setGene] = useState("abc");
  const [fetched, setFetched] = useState(false); // state just to keep track of whether gene is fetched asynchronously

  useEffect(() => {
    if(!fetched){
      setFetched(true);
      (async () => {
        const gotGene = await aptosClient.view({
          payload: {
            function: `${CONTRACT_ADDRESS}::creature::get_gene`,
            functionArguments: [],
          }
        });
        console.log(`Aptos view returned gene: ${gotGene}`);
        setGene(gotGene as unknown as string);
      })();
    }
  }, []);

  function randomize() {
    let randomChar = () => itoa(Math.floor(Math.random() * 3));
    setGene(`${randomChar()}${randomChar()}${randomChar()}`);
    console.log(`randomized gene: ${gene}`);

    (async () => {
      console.log(`sending transaction of new gene: ${gene}`);
      const data: InputEntryFunctionData = {
        function: `${CONTRACT_ADDRESS}::creature::set_gene`,
        functionArguments: [gene],
      };
      const payload = {
        data,
      };
      const pendingTxn = await signAndSubmitTransaction(payload);
      const response = await aptosClient.waitForTransaction({ transactionHash: pendingTxn.hash });
      console.log(`Committed transaction: ${response.hash}`);
    })();
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <span className="title">Generative Creature</span>
        <WalletSelector />
      </div>
      <main  className={`${styles.main} ${inter.className}`}>
        <button onClick={randomize}>Randomize</button>
        <Creature gene={gene}/>
      </main>
    </>
  );
}
